/*
 * File:   pre_lab8.c
 * Author: marce
 *
 * Created on April 16, 2023, 9:14 PM
 */


// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

/**********LIBRERIAS************/
#include <stdio.h>
#include <xc.h>
#include <stdint.h>
#include <pic16f887.h>


/***********DEFINIR CONSTANTES**********/
#define _XTAL_FREQ 8000000

/***********Variables Globlales*********/


/***********PROTOTIPOS************/
void setup(void);
void initUART(void);

/***********INTERRUPCIONES**********/
void __interrupt() isr(void)
{

    return;
}


/***********CODIGO PRINCIPAL**********/

void main(void){
    setup();
    initUART();
    
    while(1){
        PORTB++;        
        if(TXSTAbits.TRMT==1){
            TXREG = PORTB +32;
        }
        __delay_ms(500);
    }
    
    
    return;
}

/**********Funciones************/
void setup(void)
{
    ANSEL = 0;
    ANSELH = 0;
    TRISA = 0;
    TRISB = 0;
    TRISD = 0;
    TRISE = 0;
    
    PORTB = 0;
    PORTD = 0;
    
    
/*
    OSCCONbits.IRCF = 0b0110;
    OSCCONbits.SCS = 1;*/
    
    OSCCON = 0X75;
 /*
    OPTION_REGbits.T0CS = 0;
    OPTION_REGbits.T0SE = 0;
    OPTION_REGbits.PSA = 0;
    OPTION_REGbits.PS2 = 1;
    OPTION_REGbits.PS1 = 1;
    OPTION_REGbits.PS0 = 1;
    
    
    //subrutina de reseteo
    TMR0 = _trm0_value;
    
    //habilitar interrupciones
    T0IF=0;
    T0IE=1;
    GIE=1;
    */
    return;
    
}

void initUART(void){
    //paso 1
    SPBRG = 12; //SPBRGH:SPBRG  = [(8Mhz/9600)/64]-1 = 12 ? real 9615.38
    SPBRGH = 0; //%error = (9615.38-9600)/9600 * 100 = 0.16%
    BRGH = 0;   
    BRG16 = 0;
    
    //paso 2
    SYNC = 0;   // TXSTAbits ? habilitar transmision & TXIF = 1
    SPEN = 1;   //RCSTAbits ? apagar bandera TX
    
    //paso 3: habilitar los 9 bits
    
    //paso 4
    TXEN = 1;
    TXIF = 0;
    //C
    
    //paso 5: interrupciones
    
    
    
    //paso 6: cargar 9no bit
    //paso 7: cargar 
    
    
}
